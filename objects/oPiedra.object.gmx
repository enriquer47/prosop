<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPiedra</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grv=oProperties.grv;
xvel=0;
yvel=0;
pegado=0;//0 no esta pegado; 1 se pego al suelo
cont=0;
contpared=0;
conttecho=0;
image_yscale=abs(oPlayer.image_yscale);
image_xscale=abs(oPlayer.image_yscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Colisiones
if(!pegado){
    colLineV1=collision_line(x-10,y+20,x+10,y+20,oSuelo,false,false);//si choca con el suelo
    colLineV2=collision_line(x,y-20,x,y-20,oSuelo,false,false);//si choca con el techo
    colLineH1=collision_line(x-20,y,x-20,y,oSuelo,false,false);//pared izq
    colLineH2=collision_line(x+20,y,x+20,y,oSuelo,false,false);//pared derecha
}
//movimiento horizontal
for(i=0;i&lt;abs(xvel);i++){
    if(place_meeting(x+sign(xvel),y,oSuelo))
                break;
            else
                x+=sign(xvel)*image_yscale;
}
//movimiento vertical
for(i=0;i&lt;abs(yvel);i++){
    if(place_meeting(x,sign(yvel)+y,oSuelo))
                break;
            else
                y+=sign(yvel)*image_yscale;
}
if(abs(xvel)&gt;0.1)
    xvel-=sign(xvel)*0.02;//rozamiento
else
    xvel=0;
if(colLineV1){//si choco con el suelo
    if(abs(yvel)&lt;2)
        yvel=0;
    else{

        if(cont&lt;0){
            if(abs(xvel)&gt;0.5)
                ruido(x,y,20,0);
            cont=15;
            yvel=-abs(yvel)+5;//rebote
    }
    }
    
        
    if(abs(xvel)&gt;0.3)
        xvel-=sign(xvel)*0.2;//rozamiento cuando toca el suelo
}
else{
    yvel+=grv;//gravedad
    if(colLineV2){
        if(conttecho&lt;0){
            yvel=-yvel-3;
            conttecho=15;
            ruido(x,y,20,0);
            }
    }else{
        if((colLineH1||colLineH2)&amp;&amp;contpared&lt;0){
            contpared=15;
            xvel-=sign(xvel)*0.2;
            xvel=-xvel;
            if(abs(xvel)&gt;0.5)
                ruido(x,y,20,0);

            }
        }
}

//Rebote con paredes

cont--;//contador de rebote en suelo
contpared--;//contador de rebote en pared
conttecho--;//contador de rebote con el techo

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
