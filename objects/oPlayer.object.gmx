<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creacion de variables

//Movimiento
yvel=0;
xvel=0;
grv=oProperties.grv;
aire=0;
sprint=1;
control=0;
tumbado=0;
agachado=0;
deslizamiento=1;

//Colsisiones
    //Vertical
colLineV=collision_line(x-60*image_yscale-150*tumbado*image_yscale,y+250*image_yscale-170*tumbado*image_yscale,x+60*image_yscale+150*image_yscale*tumbado,y+250*image_yscale-170*image_yscale*tumbado,oSuelo,false,false);//choca con los pies
colLineV2=collision_line(x-60*image_yscale,y-190*image_yscale,x+60*image_yscale,y-180*image_yscale,oSuelo,false,false);//choca con la cabeza
colLineV3=collision_line(x-30*image_yscale-150*tumbado*image_yscale,y+249*image_yscale-170*tumbado*image_yscale,x+30*image_yscale+150*tumbado*image_yscale,y+249*image_yscale-170*tumbado*image_yscale,oSuelo,false,false);//si estoy hundido en el suelo
colRectV=collision_rectangle(x-60*image_yscale,y-180*image_yscale,x+60*image_yscale,y-180*image_yscale-40*agachado*image_yscale,oSuelo,false,false); //choca con la cabeza al levantarse del agachado
colRectV2=collision_rectangle(x-60*image_yscale-150*image_yscale,y-180*image_yscale,x+60*image_yscale+150*image_yscale,y-180*image_yscale-40*image_yscale,oSuelo,false,false); //choca con la cabeza al levantarse del tumbado
    //Horizontal
colRectH=collision_rectangle(x,y-180*image_yscale+90*agachado*image_yscale+140*tumbado*image_yscale,x+xvel+sign(xvel)*80*image_yscale+sign(xvel)*tumbado*150*image_yscale,y+230*image_yscale,oSuelo,false,false);
    //Comprobacion para tumbarse

    //Obstáculos
colRectObs=collision_rectangle(x,y-160*image_yscale,x+xvel+sign(xvel)*150*image_yscale,y+200*image_yscale,oObstaculo,false,false);

//Dashes
dashcont=0;
dashcontdown=0;
dasheando=0;
dashcontup=0;
pasorapidocont=0;
obst=noone;

//Combate
punioCont=0;
golpe=-1;
salud=100;
ygolpe=-100;
xgolpe=0;
cama=rHabitacion;
contador=0;
tipoGolpe=oPunio;//tipo de golpe que se va a ejecutar (oPunio por defecto)
    //Agarre de pie
    agarrando=0;
    enemigo=-1;
atacando=0;
bloqueando=0;
bloqueoStamina=0;


//Creación de hitboxes
cabeza=instance_create(x,y,oHbCabP);
torso=instance_create(x,y,oHbTorsoP);
piernas=instance_create(x,y,oHbPiernasP);

//Cantidad de objetos
pistola=1;//si tienes la pistola en el inventario
c4=10; //empieza con 15 para probar
activado=1;// 1 indica que no hay ningun c4 puesto, 0 que hay alguno puesto
creadosC4=0;//para activar los c4
for(j=0;j&lt;20;j++){
    c4s[j]=0;
}
piedras=15;
fuerzapiedra=0;//mide la fuerza con la que lanzar la piedra
with(oPunio)
    instance_destroy();//da error el salto si no hago esto
equipamiento=instance_create(x,y,oEquipamiento);
gancho=1;
linterna=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Luz (en desuso)
/*if(instance_exists(oLight)){
    size = 800;//tamaño de la luz
    draw_set_blend_mode(bm_subtract);
    surface_set_target(light);
    draw_ellipse_color(x-size/2-view_xview,y-size/2-view_yview,x+size/2-view_xview,y+size/2-view_yview,c_purple,c_black,false);//el primer color lo puedo cambiar
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimiento

//TERMINAR GANCHO

//BALA PUEDE ATRAVESAR PAREDES

//MECANICA DE BLOQUEO STAMINA (usar variable bloqueoStamina ya creada)

//Salud
if(salud&lt;=0&amp;&amp;control||keyboard_check_pressed(ord("M"))) //lo mato con la M para probar
    muerte(cama);

//Colsisiones
    //Vertical
colLineV=collision_line(x-60*image_yscale-150*tumbado*image_yscale,y+250*image_yscale-170*tumbado*image_yscale,x+60*image_yscale+150*image_yscale*tumbado,y+250*image_yscale-170*image_yscale*tumbado,oSuelo,false,false);//choca con los pies
colLineV2=collision_line(x-60*image_yscale,y-190*image_yscale,x+60*image_yscale,y-180*image_yscale,oSuelo,false,false);//choca con la cabeza
colLineV3=collision_line(x-30*image_yscale-150*tumbado*image_yscale,y+249*image_yscale-170*tumbado*image_yscale,x+30*image_yscale+150*tumbado*image_yscale,y+249*image_yscale-170*tumbado*image_yscale,oSuelo,false,false);//si estoy hundido en el suelo
colRectV=collision_rectangle(x-60*image_yscale,y-180*image_yscale,x+60*image_yscale,y-180*image_yscale-40*agachado*image_yscale,oSuelo,false,false); //choca con la cabeza al levantarse del agachado
colRectV2=collision_rectangle(x-60*image_yscale-150*image_yscale,y-180*image_yscale,x+60*image_yscale+150*image_yscale,y-180*image_yscale-40*image_yscale,oSuelo,false,false); //choca con la cabeza al levantarse del tumbado
    //Horizontal
colRectH=collision_rectangle(x,y-180*image_yscale+90*agachado*image_yscale+140*tumbado*image_yscale,x+xvel+sign(xvel)*80*image_yscale+sign(xvel)*tumbado*150*image_yscale,y+230*image_yscale,oSuelo,false,false);
    //Comprobacion para tumbarse

    //Obstáculos
colRectObs=collision_rectangle(x,y-160*image_yscale,x+xvel+sign(xvel)*150*image_yscale,y+200*image_yscale,oObstaculo,false,false);
//Horizontal

if(control)
{   //velocidad horizontal
    if(!colRectH)
        x+=xvel*image_yscale;
    else 
        for(i=0;i&lt;abs(xvel);i++){
            if(place_meeting(x+sign(xvel),y,oSuelo))
                break;
            else
                x+=sign(xvel)*image_yscale;
        }
            
    if(keyboard_check(vk_shift)) //sprint
    {
        if(sprint&lt;2)
            sprint+=0.05;
    }
    else
        if(sprint&gt;1)
            sprint-=0.05;
    image_speed=(sprint/10); //velocidad de animacion
    if(tumbado==0) //tumbado
    {
        if(keyboard_check(ord("D")))
        {
            xvel=4*sprint-2*agarrando;
            image_xscale=abs(image_xscale);
        }
        else 
            if(keyboard_check(ord("A")))
            {
                xvel=-4*sprint+2*agarrando;
                image_xscale=-abs(image_xscale);
            }
            else
                if(abs(xvel)&gt;=2)
                {
                    xvel=sign(xvel)*abs(xvel)-sign(xvel)*deslizamiento;//si disminuyo este valor patino en el suelo
                    }else
                    xvel=0;
    }
}
//Parada de caída
if(control)
{
    if(colLineV)
    {
        yvel=0;
        aire=0;   
    }
    else
    {   
        aire=1;
        yvel+=grv;//GRAVEDAD (ya incluye la escala)
        if(colLineV2){//si me doy con la cabeza en el techo
            y+=2;
            if(yvel&lt;0)
                yvel=0;
        }
    }
}
//Salto (incluyendo obstáculos)
if(control)
{
    if(keyboard_check_pressed(vk_space)&amp;&amp;tumbado==0&amp;&amp;!instance_exists(oPunio)) //si puedo saltar
    {
        if(colRectObs&amp;&amp;dashcontdown&lt;=0)//hay obstaculo delante y no estoy dasheando
        {      
            obst=nearest(oObstaculo);
            if(obst.altura&gt;300){//si es muy alto me subo simplemente
                dashcontup=20*image_yscale;
                y-=(obst.altura+5)-(obst.y+obst.altura/2-y-240*image_yscale);//FALTA PONERLE UN LIMITE A LA ESCALADA, PUEDE ESCALAR CUALQUIER ALTURA DE OBSTACULO
            
            }else{//si no es muy alto
            if(colLineV){//si estoy tocando el suelo
            if(abs(xvel)&gt;=5)//si voy rapido lo paso por encima
            { 
                if(instance_exists(obst))
                {   
                      
                    if(obst.longitud&lt;300*image_yscale)//si es corto lo dasheo por encima
                    {
                        dashcontup=obst.longitud*image_yscale/5.2;
                        y-=obst.altura;
                    }else//si es largo aunque vaya rápido me subo encima
                        {
                            dashcontup=20*image_yscale;
                            y-=obst.altura+5;
                        }
                }
            }else{
                if(abs(xvel)&gt;1){//si voy despacio me subo encima
                   dashcontup=20*image_yscale;
                   y-=obst.altura+5; 
                }
            }
            }
            }
        }
        else
        {   if(colLineV)
                yvel=-6;//salto normal
        }
    }
    y+=yvel*image_yscale;//MOVIMIENTO VERTICAL
    if(colLineV3)//si estoy metido en el techo
        y-=1;
}
//Paso rápido
if(control){
    if(!dasheando&amp;&amp;!tumbado&amp;&amp;!agachado&amp;&amp;!aire&amp;&amp;!agarrando){//si puedo dar el paso rápido
        if(keyboard_check_pressed(ord("G"))&amp;&amp;pasorapidocont&lt;-10)
            pasorapidocont=6;
    }
}
//Dashes
if(control)
{
    if(dashcont&gt;0||dashcontdown&gt;0||dashcontup&gt;0||pasorapidocont&gt;0)
        dasheando=1;
        else
            dasheando=0;
    dashcont--;
    dashcontdown--;
    dashcontup--;
    pasorapidocont--;
    if(agachado==0&amp;&amp;tumbado==0&amp;&amp;!agarrando&amp;&amp;dashcont&lt;=-30&amp;&amp;sprint&gt;1&amp;&amp;abs(xvel)&gt;1&amp;&amp;keyboard_check_pressed(ord("C"))&amp;&amp;!aire&amp;&amp;dashcontdown&lt;=-30&amp;&amp;dashcontup&lt;=-30&amp;&amp;pasorapidocont&lt;=-10)//si no estoy dasheando ya y se ha acabado el cooldown
        dashcont=30;
    if(dashcont&gt;0)//si estoy dasheando normal
    {   
        if(dashcont&lt;25&amp;&amp;aire)//si he dasheado y luego saltado
            agachado=0
            else
                agachado=1;
        if(keyboard_check(ord("A"))||keyboard_check(ord("D"))){
            xvel=sign(xvel)*abs(xvel)*dashcont*0.1;
        }else
            {
                xvel=sign(xvel)*abs(xvel)-sign(xvel)*0.3;
            }
    }
    else{
        if(dashcontdown&gt;0)//si estoy dasheando hacia abajo
        {
            tumbado=1;
            xvel=sign(xvel)*abs(xvel)*dashcontdown*0.1;
        }
        else
        if(dashcontup&gt;0)//si estoy dasheando sobre un osbtáculo
        {
            //activar animacion de saltar obstaculo
            if(keyboard_check(ord("A"))||keyboard_check(ord("D")))
            {
            xvel=sign(xvel)*abs(xvel)*dashcontup*0.1;
            }
            else
            {
                xvel=sign(xvel)*abs(xvel)-sign(xvel)*0.3;//freno cuando dejo de pulsar las teclas de movimiento
            }
        }
        else{
            if(pasorapidocont&gt;0){//movimiento del paso rapido
                xvel=-sign(image_xscale)*15;
                agachado=0;
                }
        }
        }
}
//Agachado
if(control)
{
    if((keyboard_check(ord("C"))||dasheando||colRectV)&amp;&amp;!aire&amp;&amp;pasorapidocont&lt;0) //si estoy dasheando o me choco con la cabeza si me levanto o pulso la C
    {   
        agachado=1;
    }else{
        agachado=0;
    }
    if(agachado&amp;&amp;!dasheando){
      if(keyboard_check(ord("D"))||keyboard_check(ord("A")))
        xvel=sign(xvel)*2*sprint;
    }
}      
 


//Tumbarse
if(control)
{   
    if((keyboard_check_pressed(ord("V"))||keyboard_check_pressed(ord("C")))&amp;&amp;tumbado==1&amp;&amp;!colRectV2)
    {
        tumbado=0;
        y-=170*image_yscale;
    }
    else
        if(tumbado==0&amp;&amp;keyboard_check_pressed(ord("V"))&amp;&amp;!(place_meeting(x+150*image_yscale,y-3,oSuelo)||place_meeting(x-150*image_yscale,y-3,oSuelo)))
        {
            tumbado=1;
            y+=170*image_yscale;
        }
    if(tumbado==1)
    {
        if(keyboard_check(ord("D")))
        {
            xvel=1*sprint;
            image_xscale=abs(image_xscale);
        }
        else 
            if(keyboard_check(ord("A")))
            {
                xvel=-1*sprint;
                image_xscale=-abs(image_xscale);
            }
            else
                xvel=0;
        }
}

//Combate


//Golpeo

if(control)
{   
    atacando=instance_exists(oGolpe);
    if(tumbado)//agarre de piernas
    {
        tipoGolpe=oAgarre;
        xgolpe=130;
        ygolpe=-10;
    }
    else
    {
        if(agachado){
            ygolpe=0;
            xgolpe=100;
            tipoGolpe=oPunio;
        }else{
            if(keyboard_check(vk_down)){
            ygolpe=50;//controla la altura de salida del pisoton
            xgolpe=100;
            tipoGolpe=oPisoton;
            
            }else{
            ygolpe=-100;//controla la altura de salida del punio
            xgolpe=100;
            tipoGolpe=oPunio;
            }
        }
    }
    if(keyboard_check_pressed(ord("E"))&amp;&amp;!atacando&amp;&amp;!agarrando){
        golpe=golpear(xgolpe,ygolpe,aire,tipoGolpe);
        if(aire)
            yvel+=10;//pega golpe hacia el suelo
    }
    //BLOQUEO
    if(keyboard_check(ord("Q"))&amp;&amp;!tumbado&amp;&amp;!atacando&amp;&amp;!agarrando){
        bloqueando=1;
    }else{
        bloqueando=0;
    }
}
//Uso de objetos

if(control){
    //c4
if(keyboard_check_pressed(ord("F"))){
    switch(equipamiento.actual){
    case 0: //si no tengo nada equipado agarro
    if(aire){//no puedo estar agarrando en el aire
        agarrando=0;
        if(instance_exists(enemigo)){
                enemigo.agarrado=0;
            }
        }
    if(tumbado)
    {
        //completar con agarrar las piernas para tirar al suelo
    }
    else
    {
    
    if(!aire){
        if(agarrando){//si estoy agarrando dejo de agarrar
            agarrando=0;
            if(instance_exists(enemigo)){
                enemigo.agarrado=0;
            }
            }
        else{//si no estoy agarrando
            if(instance_exists(oEnemy)){//si hay un enemigo
                enemigo=nearest(oEnemy);
                if(distance_to_object(enemigo)&lt;70&amp;&amp;(oPlayer.x&lt;enemigo.x&amp;&amp;enemigo.image_xscale&gt;0)||(oPlayer.x&gt;enemigo.x&amp;&amp;enemigo.image_xscale&lt;0)){//si esta cerca y dado la vuelta
                    agarrando=1;
                    enemigo.agarrado=1;
                    agachado=0;
                }
            }
            }
        }
    }
    break;
    
    case 1://pistola 
    break;
    case 2: //c4
    if(c4&gt;0&amp;&amp;instance_number(oC4)&lt;3&amp;&amp;!agarrando)//tirar c4
        {
        c4s[creadosC4]=lanzarC4(xvel,keyboard_check(vk_up),image_xscale);
        creadosC4++;
        activado=0;
        }
    case 3: //linterna
    break;
    case 4: //gancho?
    break;
    }

    

if(place_meeting(x,y,oCajaC4)&amp;&amp;keyboard_check_pressed(ord("F"))&amp;&amp;!agarrando){//coger c4
    if(c4&lt;10){
        with(nearest(oCajaC4)){
            instance_destroy();
            }
        if(c4&lt;8){
            c4+=3;
        }else
            c4=10;
        }
        else{
        msg(nearest(oCajaC4).x,nearest(oCajaC4).y,1,"Ya no puedes llevar más");
        }
}
}
    if(keyboard_check_pressed(ord("Y"))&amp;&amp;!activado){//activar c4
    var j=0;
    while(j&lt;creadosC4){
        c4s[j].activado=1;
        j++;
    }
    creadosC4=0;
    activado=1;
}
    //piedra
    if(keyboard_check(ord("P"))&amp;&amp;piedras&gt;0){
    if(fuerzapiedra&lt;6){
        fuerzapiedra+=0.1;
    }
}
    if(keyboard_check_released(ord("P"))&amp;&amp;piedras&gt;0){
        lanzarPiedra(xvel,keyboard_check(vk_up),image_xscale,fuerzapiedra);
        fuerzapiedra=0;
        }
}

//sprites
if(control)
    if(punioCont&lt;=0)
    {
    if(tumbado==1){
        sprite_index=sTumbado;
        }
       else{
            if(agachado==1){
                if(bloqueando==1){
                        sprite_index=sBloqueoAgachado;
                    }
                    else{
                        sprite_index=sAgachado;
                    }
            }
            else{
                if(instance_exists(oPunio)){
                    sprite_index=sPunietazo;
                    punioCont=20;
                    }
                    else{
                        if(aire==1){
                            if(bloqueando==1)
                                    sprite_index=sBloqueoStand;
                                else
                                    sprite_index=sPlayer;
                        
                            }
                        else{
                            if(!colRectH&amp;&amp;((keyboard_check(ord("A"))||keyboard_check(ord("D"))||pasorapidocont&gt;0))){
                                if(bloqueando==1){
                                    sprite_index=sBloqueoAndando;
                                    }
                                    else{
                                    sprite_index=sAndando;
                                    }
                                }
                            else{
                                if(bloqueando==1)
                                    sprite_index=sBloqueoStand;
                                else
                                    sprite_index=sPlayer;
                                }
                                }
                        }
                }
       }
    }else
    {
        sprite_index=sPunietazo;
        punioCont--;
    }
//Hitboxes
    //Cabeza
if(sprite_index==sPlayer||sprite_index==sAndando||sprite_index==sPunietazo){
    cabeza.y=y-212*image_yscale;
    if(sprite_index==sAndando)
        cabeza.x=x+image_xscale*15;
        else
        cabeza.x=x;
}else{
    if(sprite_index==sAgachado){
        cabeza.y=y-100*image_yscale;
        cabeza.x=x+image_xscale*25;
        }
}
    //Torso
if(sprite_index==sPlayer||sprite_index==sAndando||sprite_index==sPunietazo){
    torso.y=y-112*image_yscale;
    if(sprite_index==sAndando)
        torso.x=x+image_xscale*15;
        else
        torso.x=x;
}else{
    if(sprite_index==sAgachado){
        torso.y=y-20*image_yscale;
        torso.x=x+image_xscale*15;
    }
        
}
    //Piernas
if(sprite_index==sPlayer||sprite_index==sAndando||sprite_index==sPunietazo){
    piernas.y=y+45*image_yscale;
    piernas.image_yscale=6*image_yscale;
    if(sprite_index==sAndando){
        piernas.x=x+image_xscale*30;
        piernas.image_xscale=4*image_yscale;
        }
        else
        {
            piernas.x=x;
            piernas.image_xscale=3*image_yscale;
        }
}else{
    if(sprite_index==sAgachado){
        piernas.y=y+135*image_yscale;
        piernas.x=x+image_xscale*15;
        piernas.image_xscale=6*image_yscale;
        piernas.image_yscale=3*image_yscale;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
